#TradingSystem for TradePhantoms

#Globals -----------------------------------
def na = Double.NaN;
def bn = BarNumber();
def o = open;
def h = high;
def l = low;
def c = close;
def aggD = AggregationPeriod.DAY;
def aggW = AggregationPeriod.WEEK;
def aggM = AggregationPeriod.MONTH;
def prevDClose = close(period = aggD)[1];
def prevWClose = close(period = aggD)[1];
def prevMClose = close(period = aggM)[1];
def EMA9 = ExpAverage(close, 9);
def EMA21 = ExpAverage(close, 21);
def EMA40 = ExpAverage(close, 40);
def EMA200 = ExpAverage(close, 200);
def ymd = GetYYYYMMDD();
def globex = GetTime() < RegularTradingStart(GetYYYYMMDD());
def isNewDay  = !IsNaN(close) and ymd != ymd[1];
def dayCount = CompoundValue(1, if isNewDay then dayCount[1] + 1 else dayCount[1], 0);
def thisDay  = (HighestAll(dayCount) - dayCount) ;
def start = if thisday == 1 and secondsFromTime(0930)==0 then 1 else start[1];
def isperiodrolled = thisDay <= 1 and start;
input locate_bubbles_at_time = 0930;

def timeopen = SecondsFromTime(locate_bubbles_at_time) == 0;
rec volumeSum;
rec volumeVwapSum;
# ------------------------------------------

#EMAS --------------------------------------
plot plot9ema  = if GetAggregationPeriod() <= AggregationPeriod.FIVE_MIN then EMA9 else na;
plot plot21ema = EMA21;
plot plot40ema = if GetAggregationPeriod() >= AggregationPeriod.TWO_MIN and GetAggregationPeriod() <= AggregationPeriod.FOUR_HOURS then EMA40 else na;

plot9ema.SetDefaultColor(Color.PINK);
plot21ema.SetDefaultColor(Color.CYAN);
plot40ema.SetDefaultColor(Color.BLUE);
plot21ema.SetLineWeight(2);
plot40ema.SetLineWeight(3);
plot9ema.HideBubble();
plot21ema.HideBubble();
plot40ema.HideBubble();
#--------------------------------------

#VWAP --------------------------------------
input showDailyVwap   = yes;
input show2DayVWAP    = yes;
input showWeeklyVwap  = yes;
input showMonthlyVwap = yes;

def dVwap = reference VWAP("time frame" = "DAY");
def twoDVwap = volumeVwapSum / volumeSum;
def wVwap = reference VWAP("time frame" = "WEEK");
def mVwap = reference VWAP("time frame" = "MONTH");

if !(isperiodrolled) {
    volumeSum = volume;
    volumeVwapSum = volume * vwap;
} else {
    volumeSum = CompoundValue(1, volumeSum[1] + volume, volume);
    volumeVwapSum = CompoundValue(1, volumeVwapSum[1] + volume * vwap, volume * vwap);
}

<<<<<<< HEAD
rec v = if IsNaN(reference VWAP("time frame" = "DAY")) then v[1] else twoDVwap;

plot vwapDay   = if showDailyVwap then dVwap else na;
plot vwap2day = if isperiodrolled && show2DayVWAP then v else na;
plot vwapWeek  = if showWeeklyVwap then wVwap else na;
plot vwapMonth = if showMonthlyVwap then mVwap else na;
=======
rec v = if IsNaN(reference VWAP()) then v[1] else twoDVwap;

plot vwapDay   = if showDailyVwap then dVwap else na;
plot vwap2day = if isperiodrolled && show2DayVWAP then v else na;
plot vwapWeek  = if showWeeklyVwap && GetAggregationPeriod() > AggregationPeriod.TWO_MIN then wVwap else na;
plot vwapMonth = if showMonthlyVwap && GetAggregationPeriod() > AggregationPeriod.TWO_MIN then mVwap else na;
>>>>>>> 00c4fe111ca5656f5c1db0beb1205564a38288bb

vwapDay.SetDefaultColor(Color.CYAN);
vwap2day.SetDefaultColor(Color.GRAY);
vwap2day.SetLineWeight(2);
vwapWeek.SetDefaultColor(Color.YELLOW);
vwapMonth.SetDefaultColor(Color.DARK_ORANGE);
vwapDay.SetPaintingStrategy(PaintingStrategy.LINE);
<<<<<<< HEAD
vwap2day.SetPaintingStrategy(PaintingStrategy.LINE);
=======
vwap2day.SetPaintingStrategy(PaintingStrategy.LINE);    
>>>>>>> 00c4fe111ca5656f5c1db0beb1205564a38288bb
vwapWeek.SetPaintingStrategy(PaintingStrategy.LINE);
vwapMonth.SetPaintingStrategy(PaintingStrategy.LINE);
vwapDay.SetStyle(Curve.SHORT_DASH);
vwap2day.SetStyle(Curve.SHORT_DASH);
vwapWeek.SetStyle(Curve.SHORT_DASH);
vwapMonth.SetStyle(Curve.SHORT_DASH);
vwapDay.HideBubble();
vwap2day.HideBubble();
vwapWeek.HideBubble();
vwapMonth.HideBubble();
vwapDay.HideTitle();
vwap2day.HideTitle();
vwapWeek.HideTitle();
vwapMonth.HideTitle();
#--------------------------------------

#AUTO LEVELS -------------------------------
input extend_lines = no;
input showlabel = yes;
input showOnlyLastPeriod = yes;
input showBubbles = yes;
input showValuesInBubbles = no;
input bubbleOffset = 1;

input showDailylevels = no;
input showWeeklyLevels = yes;
input showMonthlyLevels = yes;
input PlotGlobexHiLo = yes;

plot prevDayLow;
plot prevDayHigh;
plot prevWeekLow;
plot prevWeekHigh;
plot prevMonthLow;
plot prevMonthHigh;
plot GlobexHigh;
plot GlobexLow;
def exp = IsNaN(close[0]);

prevDayLow   = if extend_lines
               then LowestAll(if exp then low("period" = aggD)[1] else na)
               else if exp then low("period" = aggD)[1]
               else na;
prevDayHigh  = if extend_lines
               then HighestAll(if exp then high("period" = aggD)[1] else na)
               else if exp then high("period" = aggD)[1]
               else na;
prevWeekLow   = if extend_lines
               then LowestAll(if exp then low("period" = aggW)[1] else na)
               else if exp then low("period" = aggW)[1]
               else na;
prevWeekHigh  = if extend_lines
               then HighestAll(if exp then high("period" = aggW)[1] else na)
               else if exp then high("period" = aggW)[1]
               else na;
prevMonthLow   = if extend_lines
               then LowestAll(if exp then low("period" = aggM)[1] else na)
               else if exp then low("period" = aggM)[1]
               else na;
prevMonthHigh  = if extend_lines
               then HighestAll(if exp then high("period" = aggM)[1] else na)
               else if exp then high("period" = aggM)[1]
               else na;

def ONhigh = if GlobeX and !GlobeX[1] then h else if GlobeX and h > ONhigh[1] then h else ONhigh[1];
def ONhighBar = if GlobeX and h == ONhigh then bn else na;

def ONlow = if GlobeX and !GlobeX[1] then l else if GlobeX and l < ONlow[1] then l else ONlow[1];
def ONlowBar = if GlobeX and l == ONlow then bn else na;

def OverNightHigh = if bn == HighestAll(ONhighBar) then ONhigh else OverNightHigh[1];
def OverNightLow = if bn == HighestAll(ONlowBar) then ONlow else OverNightLow[1];

def PM_H = if isnan(close) then PM_H[1] else if OverNightHigh > 0 then OverNightHigh else na;
def PM_L = if isnan(close) then PM_L[1] else if OverNightLow > 0 then OverNightLow else na;

if !IsNaN(close(period = aggD)[-1]) {
    GlobexHigh = na;
    GlobexLow = na;
} else {
    GlobexHigh = if !IsNaN(close) then na else PM_H;
    GlobexLow  = if !IsNaN(close) then na else PM_L;
}

def b = bubbleOffset;
def b1 = b + 1;
#---------------------DAILY
AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevDayLow[b], "D-" + if showValuesInBubbles then "Lo $" + prevDayLow else "Lo", Color.CYAN, yes);

AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevDayHigh[b], "D-" + if showValuesInBubbles then "Hi $" + prevDayHigh else "Hi", Color.CYAN, yes);
#------------------------------
#--------------------WEEKLY
AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevWeekLow[b], "W-" + if showValuesInBubbles then "Lo $" + prevWeekLow else "Lo", Color.YELLOW, yes);

AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevWeekHigh[b], "W-" + if showValuesInBubbles then "Hi $" + prevWeekHigh else "Hi", Color.YELLOW, yes);
#------------------------------
#--------------------MONTHLY
AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevMonthLow[b], "M-" + if showValuesInBubbles then "Lo $" + prevMonthLow else "Lo", Color.DARK_ORANGE, yes);

AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
prevMonthHigh[b], "M-" + if showValuesInBubbles then "Hi $" + prevMonthHigh else "Hi", Color.DARK_ORANGE, yes);
#------------------------------
#--------------------GLOBEX
AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
GlobexHigh[b], "G-" + if showValuesInBubbles then "Hi $" + GlobexHigh else "Hi", Color.GRAY, yes);

AddChartBubble(showBubbles and IsNaN(close[b]) and !IsNaN(close[b1]),
GlobexLow[b], "G-" + if showValuesInBubbles then "Lo $" + GlobexLow else "Lo", Color.GRAY, yes);
#------------------------------
GlobexHigh.SetDefaultColor(Color.GRAY);
GlobexLow.SetDefaultColor(Color.GRAY);
GlobexHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
GlobexLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
GlobexHigh.HideBubble();
GlobexHigh.HideTitle();
GlobexLow.HideBubble();
GlobexLow.HideTitle();

prevDayLow.SetDefaultColor(Color.CYAN);
prevDayHigh.SetDefaultColor(Color.CYAN);
prevDayLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevDayHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevDayLow.HideTitle();
prevDayHigh.HideTitle();

prevWeekLow.SetDefaultColor(Color.YELLOW);
prevWeekHigh.SetDefaultColor(Color.YELLOW);
prevWeekLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevWeekHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevWeekLow.HideTitle();
prevWeekHigh.HideTitle();

prevMonthLow.SetDefaultColor(Color.DARK_ORANGE);
prevMonthHigh.SetDefaultColor(Color.DARK_ORANGE);
prevMonthLow.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevMonthHigh.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
prevMonthLow.HideTitle();
prevMonthHigh.HideTitle();
#---------------------------------------------
<<<<<<< HEAD
=======






>>>>>>> 00c4fe111ca5656f5c1db0beb1205564a38288bb
